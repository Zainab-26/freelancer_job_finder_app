// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'dart:io' show Platform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web {
    return FirebaseOptions(
      apiKey: Platform.environment['FIREBASE_API_KEY'] ?? '',
      appId: Platform.environment['FIREBASE_APP_ID'] ?? '',
      messagingSenderId:
          Platform.environment['FIREBASE_MESSAGING_SENDER_ID'] ?? '',
      projectId: Platform.environment['FIREBASE_PROJECT_ID'] ?? '',
      authDomain: Platform.environment['FIREBASE_AUTH_DOMAIN'] ?? '',
      storageBucket: Platform.environment['FIREBASE_STORAGE_BUCKET'] ?? '',
      measurementId: Platform.environment['FIREBASE_MEASUREMENT_ID'] ?? '',
    );
  }

  static FirebaseOptions get android {
    return FirebaseOptions(
      apiKey: Platform.environment['FIREBASE_API_KEY_ANDROID'] ?? '',
      appId: Platform.environment['FIREBASE_APP_ID_ANDROID'] ?? '',
      messagingSenderId:
          Platform.environment['FIREBASE_MESSAGING_SENDER_ID_ANDROID'] ?? '',
      projectId: Platform.environment['FIREBASE_PROJECT_ID_ANDROID'] ?? '',
      authDomain: Platform.environment['FIREBASE_AUTH_DOMAIN_ANDROID'] ?? '',
      storageBucket:
          Platform.environment['FIREBASE_STORAGE_BUCKET_ANDROID'] ?? '',
    );
  }

  static FirebaseOptions get ios {
    return FirebaseOptions(
      apiKey: Platform.environment['FIREBASE_API_KEY_IOS'] ?? '',
      appId: Platform.environment['FIREBASE_APP_ID_IOS'] ?? '',
      messagingSenderId:
          Platform.environment['FIREBASE_MESSAGING_SENDER_ID_IOS'] ?? '',
      projectId: Platform.environment['FIREBASE_PROJECT_ID_IOS'] ?? '',
      storageBucket: Platform.environment['FIREBASE_STORAGE_BUCKET_IOS'] ?? '',
      iosClientId: Platform.environment['FIREBASE_IOS_CLIENT_ID'] ?? '',
      iosBundleId: Platform.environment['FIREBASE_IOS_BUNDLE_ID'] ?? '',
    );
  }

  static FirebaseOptions get macos {
    return FirebaseOptions(
      apiKey: Platform.environment['FIREBASE_API_KEY_MACOS'] ?? '',
      appId: Platform.environment['FIREBASE_APP_ID_MACOS'] ?? '',
      messagingSenderId:
          Platform.environment['FIREBASE_MESSAGING_SENDER_ID_MACOS'] ?? '',
      projectId: Platform.environment['FIREBASE_PROJECT_ID_MACOS'] ?? '',
      storageBucket:
          Platform.environment['FIREBASE_STORAGE_BUCKET_MACOS'] ?? '',
      iosClientId: Platform.environment['FIREBASE_IOS_CLIENT_ID_MACOS'] ?? '',
      iosBundleId: Platform.environment['FIREBASE_IOS_BUNDLE_ID_MACOS'] ?? '',
    );
  }
}
